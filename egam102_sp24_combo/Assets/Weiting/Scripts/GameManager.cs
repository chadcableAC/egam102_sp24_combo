using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using UnityEngine.SceneManagement;

namespace Weiting
{
    public class GameManager : MonoBehaviour
    {
        public TextMeshProUGUI resultText;


        private EgamMicrogameInstance microgameInstance;
        public Button restartButton; // ??Inspector??????????????


        public GameObject personPrefab; // ??????Prefab????
        private List<GameObject> allPersons = new List<GameObject>(); // ??????????????????
        public Transform busStop; // ??????????????????Unity????????Inspector??????

        private int remainingPersons; // ????????????Person????

        void Start()
        {
            Debug.Log("GameManager Start");
            StartCoroutine(GameFlow());

            // ???? microgameInstance ?????? null
            microgameInstance = FindObjectOfType<EgamMicrogameInstance>();
            if (microgameInstance == null) Debug.Log("microgameInstance is null");

            // ???? resultText ?? restartButton ?????? null
            if (resultText == null) Debug.Log("resultText is null");
            if (restartButton == null) Debug.Log("restartButton is null");

            resultText.gameObject.SetActive(false);
            restartButton.gameObject.SetActive(false);
            restartButton.onClick.AddListener(RestartGame); // ????????????????????????


        }

        IEnumerator GameFlow()
        {
            // ??????
            yield return StartCoroutine(GenerateAndMoveGroup(Random.Range(1, 6)));
            // ??????
            yield return StartCoroutine(GenerateAndMoveGroup(Random.Range(1, 6)));
            // ????????????????????????????????????????
            StartCoroutine(PersonsLeaveBusRandomly());
        }

        IEnumerator GenerateAndMoveGroup(int size)
        {
            for (int i = 0; i < size; i++)
            {
                Vector3 spawnPosition = new Vector3(4.416f, 0.834f, -5.842f); // ??????????????????
                GameObject person = Instantiate(personPrefab, spawnPosition, Quaternion.identity);
                allPersons.Add(person);
                // ??????????????????????????
                StartCoroutine(MovePersonToBus(person));
                yield return new WaitForSeconds(0.5f); // ??????????????????????????
            }
            // ??????????????????????????????????
            yield return new WaitForSeconds(5); // ????????????????????????
        }

        IEnumerator MovePersonToBus(GameObject person)
        {
            float step = 5f * Time.deltaTime; // ????????
            while (Vector3.Distance(person.transform.position, busStop.position) > 0.1f)
            {
                person.transform.position = Vector3.MoveTowards(person.transform.position, busStop.position, step);
                yield return null;
            }
            person.SetActive(false); // ????????????????????
        }

        IEnumerator PersonsLeaveBusRandomly()
        {
            yield return new WaitForSeconds(2); // ????????????

            int leaveCount = Random.Range(1, allPersons.Count + 1); // ??????????????????????????
            for (int i = 0; i < leaveCount && allPersons.Count > 0; i++)
            {
                int personIndex = Random.Range(0, allPersons.Count);
                GameObject personToLeave = allPersons[personIndex];
                allPersons.RemoveAt(personIndex); // ????????????

                personToLeave.SetActive(true);
                personToLeave.transform.position = busStop.position + new Vector3(-1, 0, 0);
                personToLeave.GetComponent<Rigidbody>().isKinematic = false;
                // ??????????????????????????????????????????????????????????????
                // personToLeave.GetComponent<DestroyOnCollision>().enabled = true;

                Vector3 wallPosition = new Vector3(-6.325f, 1.313f, -7.457f); // ????????
                Vector3 toWallDirection = (wallPosition - personToLeave.transform.position).normalized; // ??????????????
                personToLeave.GetComponent<Rigidbody>().velocity = toWallDirection * 5f; // ??????????????

                yield return new WaitForSeconds(0.5f); // ??????????????????????????????
            }
        }

        public void UpdateRemainingPersonsCount()
        {
            GameObject[] persons = GameObject.FindGameObjectsWithTag("person");
            remainingPersons = persons.Length;
            Debug.Log("Updated Remaining Persons Count: " + remainingPersons);
        }

        public void CheckNumber(int selectedNumber)
        {
            UpdateRemainingPersonsCount(); // ??????????????????????
            Debug.Log($"Player selected: {selectedNumber}, Remaining Persons: {remainingPersons}");

            if (selectedNumber == remainingPersons)
            {
                Debug.Log("Win!");
                if (resultText != null)
                {
                    resultText.text = "You Win!";
                    resultText.gameObject.SetActive(true); // ????????????

                    microgameInstance.WinGame();
                }
                EndGame(true); // ????EndGame??????????true????????????
            }
            else
            {
                Debug.Log("Lose!");
                if (resultText != null)
                {
                    resultText.text = "You Lose!";
                    resultText.gameObject.SetActive(true); // ????????????
                }
                EndGame(false); // ????EndGame??????????false????????????
            }

            restartButton.gameObject.SetActive(true);
        }

        public void EndGame(bool isWin)
        {
            Debug.Log($"EndGame called with isWin: {isWin}");

            resultText.gameObject.SetActive(true);
            restartButton.gameObject.SetActive(true);

            if (isWin)
            {
                resultText.text = "You Win!";

            }
            else
            {
                resultText.text = "You Lose!";
            }
        }

        // ??????????????
        private void RestartGame()
        {
            // ??????????????????????????
            SceneManager.LoadScene(SceneManager.GetActiveScene().name);
        }
    }
}